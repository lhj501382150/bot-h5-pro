{"remainingRequest":"D:\\workspace\\bot-manager\\bot-ui\\node_modules\\thread-loader\\dist\\cjs.js!D:\\workspace\\bot-manager\\bot-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\workspace\\bot-manager\\bot-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\workspace\\bot-manager\\bot-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\workspace\\bot-manager\\bot-ui\\src\\views\\Trade\\Wareaudit.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\workspace\\bot-manager\\bot-ui\\src\\views\\Trade\\Wareaudit.vue","mtime":1702475008498},{"path":"D:\\workspace\\bot-manager\\bot-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workspace\\bot-manager\\bot-ui\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workspace\\bot-manager\\bot-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\workspace\\bot-manager\\bot-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workspace\\bot-manager\\bot-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgS3RUYWJsZSBmcm9tICJAL3ZpZXdzL0NvcmUvS3RUYWJsZSI7CmltcG9ydCBLdEJ1dHRvbiBmcm9tICJAL3ZpZXdzL0NvcmUvS3RCdXR0b24iOwppbXBvcnQgVGFibGVDb2x1bW5GaWx0ZXJEaWFsb2cgZnJvbSAiQC92aWV3cy9Db3JlL1RhYmxlQ29sdW1uRmlsdGVyRGlhbG9nIjsKaW1wb3J0IHsgZmlsZVVybCB9IGZyb20gJ0AvdXRpbHMvZ2xvYmFsJzsKZXhwb3J0IGRlZmF1bHQgewogIGNvbXBvbmVudHM6IHsKICAgIEt0VGFibGU6IEt0VGFibGUsCiAgICBLdEJ1dHRvbjogS3RCdXR0b24sCiAgICBUYWJsZUNvbHVtbkZpbHRlckRpYWxvZzogVGFibGVDb2x1bW5GaWx0ZXJEaWFsb2cKICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBzaXplOiAnc21hbGwnLAogICAgICBmaWx0ZXJzOiB7CiAgICAgICAgY25vOiAnJywKICAgICAgICB3YXJlbm86ICcnLAogICAgICAgIHdhcmVuYW1lOiAnJwogICAgICB9LAogICAgICBjb2x1bW5zOiBbXSwKICAgICAgYnV0dG9uczogW10sCiAgICAgIGZpbHRlckNvbHVtbnM6IFtdLAogICAgICBwYWdlUmVxdWVzdDogewogICAgICAgIHBhZ2VOdW06IDEsCiAgICAgICAgcGFnZVNpemU6IDUwCiAgICAgIH0sCiAgICAgIHBhZ2VSZXN1bHQ6IHt9LAogICAgICBvcGVyYXRpb246IGZhbHNlLAogICAgICAvLyB0cnVlOuaWsOWiniwgZmFsc2U657yW6L6RCiAgICAgIGRpYWxvZ1Zpc2libGU6IGZhbHNlLAogICAgICAvLyDmlrDlop7nvJbovpHnlYzpnaLmmK/lkKbmmL7npLoKICAgICAgZWRpdExvYWRpbmc6IGZhbHNlLAogICAgICBhY3RpdmVOYW1lOiAnZmlyc3QnLAogICAgICBkYXRhRm9ybVJ1bGVzOiB7fSwKICAgICAgLy8g5paw5aKe57yW6L6R55WM6Z2i5pWw5o2uCiAgICAgIGRhdGFGb3JtOiB7fSwKICAgICAgcHdjczogW10sCiAgICAgIC8v5ZWG5ZOB5YiG57G75YiX6KGoCiAgICAgIHBpY2xpc3Q6IFtdLAogICAgICAvL+ivpuaDheWIl+ihqAogICAgICBhdHRhY2hsaXN0OiBbXSwKICAgICAgLy/pmYTku7bliJfooagKICAgICAgdmlkZW9QYXRoOiAnJwogICAgfTsKICB9LAogIG1ldGhvZHM6IHsKICAgIC8vIOiOt+WPluWIhumhteaVsOaNrgogICAgZmluZFBhZ2U6IGZ1bmN0aW9uIGZpbmRQYWdlKGRhdGEpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGlmIChkYXRhICE9PSBudWxsKSB7CiAgICAgICAgdGhpcy5wYWdlUmVxdWVzdCA9IGRhdGEucGFnZVJlcXVlc3Q7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5wYWdlUmVxdWVzdCA9IHsKICAgICAgICAgIHBhZ2VOdW06IDEsCiAgICAgICAgICBwYWdlU2l6ZTogNTAKICAgICAgICB9OwogICAgICB9CgogICAgICB0aGlzLnBhZ2VSZXF1ZXN0LnBhcmFtcyA9IHsKICAgICAgICAnY25vJzogdGhpcy5maWx0ZXJzLmNubywKICAgICAgICAnd2FyZW5vJzogdGhpcy5maWx0ZXJzLndhcmVubywKICAgICAgICAnd2FyZW5hbWVAbGlrZSc6IHRoaXMuZmlsdGVycy53YXJlbmFtZQogICAgICB9OwogICAgICB0aGlzLiRhcGkud2FyZWFwcGx5LmZpbmRBdWRpdFBhZ2UodGhpcy5wYWdlUmVxdWVzdCkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgX3RoaXMucGFnZVJlc3VsdCA9IHJlcy5kYXRhOwogICAgICB9KS50aGVuKGRhdGEgIT0gbnVsbCA/IGRhdGEuY2FsbGJhY2sgOiAnJyk7CiAgICB9LAogICAgLy/lhazlhbHor6bmg4UKICAgIGhhbmRsZVNob3c6IGZ1bmN0aW9uIGhhbmRsZVNob3coZGF0YSkge30sCiAgICAvL1RhYiDljZXmnLrkuovku7YKICAgIGhhbmRsZUNsaWNrOiBmdW5jdGlvbiBoYW5kbGVDbGljayh0YWIsIGV2ZW50KSB7fSwKICAgIGdldFdhcmVubzogZnVuY3Rpb24gZ2V0V2FyZW5vKHdhdGVyaWQpIHsKICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpOwogICAgICB2YXIgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTsKICAgICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRNb250aCgpICsgMTsKICAgICAgdmFyIHN0ckRhdGUgPSBkYXRlLmdldERhdGUoKTsKCiAgICAgIGlmIChtb250aCA+PSAxICYmIG1vbnRoIDw9IDkpIHsKICAgICAgICBtb250aCA9ICIwIiArIG1vbnRoOwogICAgICB9CgogICAgICBpZiAoc3RyRGF0ZSA+PSAwICYmIHN0ckRhdGUgPD0gOSkgewogICAgICAgIHN0ckRhdGUgPSAiMCIgKyBzdHJEYXRlOwogICAgICB9CgogICAgICB2YXIgY3VycmVudGRhdGUgPSB5ZWFyICsgbW9udGggKyBzdHJEYXRlICsgd2F0ZXJpZDsKICAgICAgcmV0dXJuIGN1cnJlbnRkYXRlOwogICAgfSwKICAgIC8vIOaYvuekuuWuoeaguOeVjOmdogogICAgaGFuZGxlQXVkaXQ6IGZ1bmN0aW9uIGhhbmRsZUF1ZGl0KHBhcmFtcykgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHRoaXMuZGlhbG9nVmlzaWJsZSA9IHRydWU7CiAgICAgIHRoaXMub3BlcmF0aW9uID0gdHJ1ZTsKICAgICAgdGhpcy5hY3RpdmVOYW1lID0gJ2ZpcnN0JzsKICAgICAgdGhpcy5kYXRhRm9ybSA9IE9iamVjdC5hc3NpZ24oe30sIHBhcmFtcy5yb3cpOwogICAgICB2YXIgcGFyYSA9IHsKICAgICAgICB3YXRlcmlkOiBwYXJhbXMucm93LndhdGVyaWQKICAgICAgfTsKICAgICAgdGhpcy4kYXBpLndhcmVhcHBseS5nZXRCeU5vKHBhcmEpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgIGlmIChyZXMuY29kZSAhPSAyMDApIHsKICAgICAgICAgIF90aGlzMi4kbWVzc2FnZS5lcnJvcihyZXMubXNnKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgX3RoaXMyLmRhdGFGb3JtID0gcmVzLmRhdGE7CiAgICAgICAgICBfdGhpczIuZGF0YUZvcm0uY25hbWUgPSBwYXJhbXMucm93LmNuYW1lOwogICAgICAgICAgX3RoaXMyLmRhdGFGb3JtLndhcmVubyA9IF90aGlzMi5nZXRXYXJlbm8oX3RoaXMyLmRhdGFGb3JtLndhdGVyaWQpOwoKICAgICAgICAgIF90aGlzMi5pbml0UGljbGlzdCgpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgLy8g5pi+56S66amz5Zue55WM6Z2iCiAgICBoYW5kbGVSZWZ1c2U6IGZ1bmN0aW9uIGhhbmRsZVJlZnVzZShwYXJhbXMpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICB0aGlzLmRpYWxvZ1Zpc2libGUgPSB0cnVlOwogICAgICB0aGlzLm9wZXJhdGlvbiA9IGZhbHNlOwogICAgICB0aGlzLmFjdGl2ZU5hbWUgPSAnZmlyc3QnOwogICAgICB0aGlzLmRhdGFGb3JtID0gT2JqZWN0LmFzc2lnbih7fSwgcGFyYW1zLnJvdyk7CiAgICAgIHZhciBwYXJhID0gewogICAgICAgIHdhdGVyaWQ6IHBhcmFtcy5yb3cud2F0ZXJpZAogICAgICB9OwogICAgICB0aGlzLiRhcGkud2FyZWFwcGx5LmdldEJ5Tm8ocGFyYSkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgaWYgKHJlcy5jb2RlICE9IDIwMCkgewogICAgICAgICAgX3RoaXMzLiRtZXNzYWdlLmVycm9yKHJlcy5tc2cpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBfdGhpczMuZGF0YUZvcm0gPSByZXMuZGF0YTsKICAgICAgICAgIF90aGlzMy5kYXRhRm9ybS5jbmFtZSA9IHBhcmFtcy5yb3cuY25hbWU7CgogICAgICAgICAgX3RoaXMzLmluaXRQaWNsaXN0KCk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICBpbml0UGljbGlzdDogZnVuY3Rpb24gaW5pdFBpY2xpc3QoKSB7CiAgICAgIHRoaXMucGljbGlzdCA9IHRoaXMuZ2V0RmlsZXModGhpcy5kYXRhRm9ybS5maWxlcGF0aCk7CiAgICAgIHRoaXMuYXR0YWNobGlzdCA9IHRoaXMuZ2V0RmlsZXModGhpcy5kYXRhRm9ybS5waWNwYXRoKTsKICAgICAgdGhpcy52aWRlb1BhdGggPSBmaWxlVXJsICsgJy9kb3dubG9hZEZpbGU/cGF0aD0nICsgdGhpcy5kYXRhRm9ybS52aWRlb3BhdGg7CiAgICB9LAogICAgZ2V0RmlsZXM6IGZ1bmN0aW9uIGdldEZpbGVzKHBhdGgpIHsKICAgICAgdmFyIHJldCA9IFtdOwoKICAgICAgaWYgKHBhdGgpIHsKICAgICAgICB2YXIgcGF0aHMgPSBwYXRoLnNwbGl0KCI7Iik7CgogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIHZhciBfcGF0aCA9IHBhdGhzW2ldOwogICAgICAgICAgaWYgKCFfcGF0aCkgY29udGludWU7CiAgICAgICAgICBfcGF0aCA9IGZpbGVVcmwgKyAnL2Rvd25sb2FkRmlsZT9wYXRoPScgKyBfcGF0aDsKICAgICAgICAgIHJldC5wdXNoKF9wYXRoKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiByZXQ7CiAgICB9LAogICAgLy8g57yW6L6RCiAgICBzdWJtaXRGb3JtOiBmdW5jdGlvbiBzdWJtaXRGb3JtKCkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKCiAgICAgIHRoaXMuJHJlZnMuZGF0YUZvcm0udmFsaWRhdGUoZnVuY3Rpb24gKHZhbGlkKSB7CiAgICAgICAgaWYgKHZhbGlkKSB7CiAgICAgICAgICBfdGhpczQuJGNvbmZpcm0oJ+ehruiupOaPkOS6pOWQl++8nycsICfmj5DnpLonLCB7fSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIF90aGlzNC5lZGl0TG9hZGluZyA9IHRydWU7CiAgICAgICAgICAgIHZhciBwYXJhbXMgPSBPYmplY3QuYXNzaWduKHt9LCBfdGhpczQuZGF0YUZvcm0pOwoKICAgICAgICAgICAgaWYgKF90aGlzNC5vcGVyYXRpb24pIHsKICAgICAgICAgICAgICBfdGhpczQuJGFwaS53YXJlYXBwbHkuYXVkaXQocGFyYW1zKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAgICAgICAgIF90aGlzNC5lZGl0TG9hZGluZyA9IGZhbHNlOwoKICAgICAgICAgICAgICAgIGlmIChyZXMuY29kZSA9PSAyMDApIHsKICAgICAgICAgICAgICAgICAgX3RoaXM0LiRtZXNzYWdlKHsKICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAn5pON5L2c5oiQ5YqfJywKICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc3VjY2VzcycKICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICBfdGhpczQuZGlhbG9nVmlzaWJsZSA9IGZhbHNlOwoKICAgICAgICAgICAgICAgICAgX3RoaXM0LiRyZWZzWydkYXRhRm9ybSddLnJlc2V0RmllbGRzKCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICBfdGhpczQuJG1lc3NhZ2UoewogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICfmk43kvZzlpLHotKUsICcgKyByZXMubXNnLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICdlcnJvcicKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX3RoaXM0LmZpbmRQYWdlKG51bGwpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIF90aGlzNC4kYXBpLndhcmVhcHBseS5yZWZ1c2UocGFyYW1zKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAgICAgICAgIF90aGlzNC5lZGl0TG9hZGluZyA9IGZhbHNlOwoKICAgICAgICAgICAgICAgIGlmIChyZXMuY29kZSA9PSAyMDApIHsKICAgICAgICAgICAgICAgICAgX3RoaXM0LiRtZXNzYWdlKHsKICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAn5pON5L2c5oiQ5YqfJywKICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc3VjY2VzcycKICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICBfdGhpczQuZGlhbG9nVmlzaWJsZSA9IGZhbHNlOwoKICAgICAgICAgICAgICAgICAgX3RoaXM0LiRyZWZzWydkYXRhRm9ybSddLnJlc2V0RmllbGRzKCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICBfdGhpczQuJG1lc3NhZ2UoewogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICfmk43kvZzlpLHotKUsICcgKyByZXMubXNnLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICdlcnJvcicKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX3RoaXM0LmZpbmRQYWdlKG51bGwpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIC8vIOWkhOeQhuihqOagvOWIl+i/h+a7pOaYvuekugogICAgZGlzcGxheUZpbHRlckNvbHVtbnNEaWFsb2c6IGZ1bmN0aW9uIGRpc3BsYXlGaWx0ZXJDb2x1bW5zRGlhbG9nKCkgewogICAgICB0aGlzLiRyZWZzLnRhYmxlQ29sdW1uRmlsdGVyRGlhbG9nLnNldERpYWxvZ1Zpc2libGUodHJ1ZSk7CiAgICB9LAogICAgLy8g5aSE55CG6KGo5qC85YiX6L+H5ruk5pi+56S6CiAgICBoYW5kbGVGaWx0ZXJDb2x1bW5zOiBmdW5jdGlvbiBoYW5kbGVGaWx0ZXJDb2x1bW5zKGRhdGEpIHsKICAgICAgdGhpcy5maWx0ZXJDb2x1bW5zID0gZGF0YS5maWx0ZXJDb2x1bW5zOwogICAgICB0aGlzLiRyZWZzLnRhYmxlQ29sdW1uRmlsdGVyRGlhbG9nLnNldERpYWxvZ1Zpc2libGUoZmFsc2UpOwogICAgfSwKICAgIGluaXRGb3JtRGF0YTogZnVuY3Rpb24gaW5pdEZvcm1EYXRhKCkgewogICAgICB0aGlzLmRhdGFGb3JtID0gewogICAgICAgIHdhdGVyaWQ6ICcnLAogICAgICAgIHdhcmVubzogJycsCiAgICAgICAgY25vOiAnJywKICAgICAgICB3YXJlbmFtZTogJycsCiAgICAgICAgc2VxOiAwLAogICAgICAgIHVuaXQ6ICcnLAogICAgICAgIHdhcmVBdHRyczogW10sCiAgICAgICAgZmlsZXBhdGg6ICcnLAogICAgICAgIHBpY3BhdGg6ICcnLAogICAgICAgIHZpZGVvcGF0aDogJycsCiAgICAgICAgbWVtbzogJycsCiAgICAgICAgc3RhdHVzOiAwCiAgICAgIH07CiAgICB9LAogICAgLy8g5piv5ZCm5pyJ5pWI5qC85byP5YyWCiAgICBzdGF0dXNGb3JtYXQ6IGZ1bmN0aW9uIHN0YXR1c0Zvcm1hdChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgewogICAgICBzd2l0Y2ggKGNlbGxWYWx1ZSkgewogICAgICAgIGNhc2UgMDoKICAgICAgICAgIHJldHVybiAi5b6F5o+Q5LqkIjsKCiAgICAgICAgY2FzZSAxOgogICAgICAgICAgcmV0dXJuICLlvoXlrqHmoLgiOwoKICAgICAgICBjYXNlIDI6CiAgICAgICAgICByZXR1cm4gIuW3suWuoeaguCI7CgogICAgICAgIGNhc2UgMzoKICAgICAgICAgIHJldHVybiAi5bey6amz5ZueIjsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHJldHVybiBjZWxsVmFsdWU7CiAgICAgIH0KICAgIH0sCiAgICAvLyDlpITnkIbooajmoLzliJfov4fmu6TmmL7npLoKICAgIGluaXRDb2x1bW5zOiBmdW5jdGlvbiBpbml0Q29sdW1ucygpIHsKICAgICAgdGhpcy5jb2x1bW5zID0gW3sKICAgICAgICBwcm9wOiAid2F0ZXJpZCIsCiAgICAgICAgbGFiZWw6ICLmtYHmsLTlj7ciLAogICAgICAgIG1pbldpZHRoOiAxMjAKICAgICAgfSwgewogICAgICAgIHByb3A6ICJ3YXJlbmFtZSIsCiAgICAgICAgbGFiZWw6ICLllYblk4HlkI3np7AiLAogICAgICAgIG1pbldpZHRoOiAxMjAKICAgICAgfSwgewogICAgICAgIHByb3A6ICJjbm8iLAogICAgICAgIGxhYmVsOiAi5YiG57G757yW5Y+3IiwKICAgICAgICBtaW5XaWR0aDogMTIwCiAgICAgIH0sIHsKICAgICAgICBwcm9wOiAiY25hbWUiLAogICAgICAgIGxhYmVsOiAi5YiG57G75ZCN56ewIiwKICAgICAgICBtaW5XaWR0aDogMTIwCiAgICAgIH0sIHsKICAgICAgICBwcm9wOiAic2VxIiwKICAgICAgICBsYWJlbDogIuaYvuekuumhuuW6jyIsCiAgICAgICAgbWluV2lkdGg6IDEwMAogICAgICB9LCB7CiAgICAgICAgcHJvcDogInVuaXQiLAogICAgICAgIGxhYmVsOiAi5oql5Lu35Y2V5L2NIiwKICAgICAgICBtaW5XaWR0aDogMTAwCiAgICAgIH0sIHsKICAgICAgICBwcm9wOiAic3RhdHVzIiwKICAgICAgICBsYWJlbDogIueKtuaAgSIsCiAgICAgICAgbWluV2lkdGg6IDI0MCwKICAgICAgICBmb3JtYXR0ZXI6IHRoaXMuc3RhdHVzRm9ybWF0CiAgICAgIH1dOwogICAgICB0aGlzLmZpbHRlckNvbHVtbnMgPSB0aGlzLmNvbHVtbnM7CiAgICB9LAogICAgaW5pdEJ1dHRvbnM6IGZ1bmN0aW9uIGluaXRCdXR0b25zKCkgewogICAgICB0aGlzLmJ1dHRvbnMgPSBbewogICAgICAgIGljb246ICdmYSBmYS1jaGVjaycsCiAgICAgICAgbGFiZWw6ICflrqHmoLgnLAogICAgICAgIHBlcm1zOiAndHJhZGU6d2FyZWFwcGx5OmF1ZGl0JywKICAgICAgICB0eXBlOiAnJywKICAgICAgICBjYWxsYmFjazogJ2hhbmRsZUF1ZGl0JwogICAgICB9LCB7CiAgICAgICAgaWNvbjogJ2ZhIGZhLXRpbWVzJywKICAgICAgICBsYWJlbDogJ+mps+WbnicsCiAgICAgICAgcGVybXM6ICd0cmFkZTp3YXJlYXBwbHk6cmVmdXNlJywKICAgICAgICB0eXBlOiAnZGFuZ2VyJywKICAgICAgICBjYWxsYmFjazogJ2hhbmRsZVJlZnVzZScKICAgICAgfV07CiAgICB9CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdGhpcy5pbml0Q29sdW1ucygpOwogICAgdGhpcy5pbml0QnV0dG9ucygpOwogIH0KfTs="},null]}