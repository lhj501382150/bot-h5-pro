{"remainingRequest":"D:\\workspace\\bot-manager\\bot-ui\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\workspace\\bot-manager\\bot-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\workspace\\bot-manager\\bot-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\workspace\\bot-manager\\bot-ui\\src\\views\\Firm\\Userfeedback.vue?vue&type=template&id=7bca1157&scoped=true&","dependencies":[{"path":"D:\\workspace\\bot-manager\\bot-ui\\src\\views\\Firm\\Userfeedback.vue","mtime":1702475008434},{"path":"D:\\workspace\\bot-manager\\bot-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workspace\\bot-manager\\bot-ui\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\workspace\\bot-manager\\bot-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workspace\\bot-manager\\bot-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}