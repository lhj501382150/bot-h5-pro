{"remainingRequest":"D:\\workspace\\bot-manager\\bot-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\workspace\\bot-manager\\bot-ui\\src\\views\\Order\\Contract.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\workspace\\bot-manager\\bot-ui\\src\\views\\Order\\Contract.vue","mtime":1702475008462},{"path":"D:\\workspace\\bot-manager\\bot-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\workspace\\bot-manager\\bot-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workspace\\bot-manager\\bot-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}