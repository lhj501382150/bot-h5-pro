{"remainingRequest":"C:\\soft\\workspace\\bot-manager\\bot-ui\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\soft\\workspace\\bot-manager\\bot-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\soft\\workspace\\bot-manager\\bot-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\soft\\workspace\\bot-manager\\bot-ui\\src\\views\\Trade\\Wareaudit.vue?vue&type=template&id=89db40ae&scoped=true&","dependencies":[{"path":"C:\\soft\\workspace\\bot-manager\\bot-ui\\src\\views\\Trade\\Wareaudit.vue","mtime":1702475008498},{"path":"C:\\soft\\workspace\\bot-manager\\bot-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\soft\\workspace\\bot-manager\\bot-ui\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\soft\\workspace\\bot-manager\\bot-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\soft\\workspace\\bot-manager\\bot-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}