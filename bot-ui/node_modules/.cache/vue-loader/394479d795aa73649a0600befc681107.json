{"remainingRequest":"D:\\workspace\\bot-manager\\bot-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\workspace\\bot-manager\\bot-ui\\src\\components\\ThemePicker\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\workspace\\bot-manager\\bot-ui\\src\\components\\ThemePicker\\index.vue","mtime":1702475008360},{"path":"D:\\workspace\\bot-manager\\bot-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workspace\\bot-manager\\bot-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\workspace\\bot-manager\\bot-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workspace\\bot-manager\\bot-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KDQoNCmNvbnN0IHZlcnNpb24gPSByZXF1aXJlKCdlbGVtZW50LXVpL3BhY2thZ2UuanNvbicpLnZlcnNpb24gLy8gZWxlbWVudC11aQ0KY29uc3QgT1JJR0lOQUxfVEhFTUUgPSAnIzQwOUVGRicgLy8gZGVmYXVsdCBjb2xvcg0KDQpleHBvcnQgZGVmYXVsdCB7DQogIG5hbWU6ICdUaGVtZVBpY2tlcicsDQogIHByb3BzOiB7DQogICAgZGVmYXVsdDogeyAvLyDliJ3lp4vljJbkuLvpopjvvIzlj6/nlLHlpJbpg6jkvKDlhaUNCiAgICAgIHR5cGU6IFN0cmluZywNCiAgICAgIGRlZmF1bHQ6IG51bGwNCiAgICB9LA0KICAgIHNpemU6IHsgLy8g5Yid5aeL5YyW5Li76aKY77yM5Y+v55Sx5aSW6YOo5Lyg5YWlDQogICAgICB0eXBlOiBTdHJpbmcsDQogICAgICBkZWZhdWx0OiAnc21hbGwnDQogICAgfQ0KICB9LA0KICBkYXRhKCkgew0KICAgIHJldHVybiB7DQogICAgICBjaGFsazogJycsIC8vIGNvbnRlbnQgb2YgdGhlbWUtY2hhbGsgY3NzDQogICAgICB0aGVtZTogT1JJR0lOQUxfVEhFTUUsDQogICAgICBzaG93U3VjY2VzczogdHJ1ZSAvLyDmmK/lkKblvLnlh7rmjaLogqTmiJDlip/mtojmga8NCiAgICB9DQogIH0sDQogIG1vdW50ZWQoKSB7DQogICAgaWYodGhpcy5kZWZhdWx0ICE9IG51bGwpIHsNCiAgICAgIHRoaXMudGhlbWUgPSB0aGlzLmRlZmF1bHQNCiAgICAgIHRoaXMuJGVtaXQoJ29uVGhlbWVDaGFuZ2UnLCB0aGlzLnRoZW1lKQ0KICAgICAgdGhpcy5zaG93U3VjY2VzcyA9IGZhbHNlDQogICAgfQ0KICB9LA0KICB3YXRjaDogew0KICAgIHRoZW1lKHZhbCwgb2xkVmFsKSB7DQogICAgICBpZiAodHlwZW9mIHZhbCAhPT0gJ3N0cmluZycpIHJldHVybg0KICAgICAgLy8g5pu/5o2iQ1NT5qC35byP77yM5L+u5pS55Li76aKY6ImyDQogICAgICBjb25zdCB0aGVtZUNsdXN0ZXIgPSB0aGlzLmdldFRoZW1lQ2x1c3Rlcih2YWwucmVwbGFjZSgnIycsICcnKSkNCiAgICAgIGNvbnN0IG9yaWdpbmFsQ2x1c3RlciA9IHRoaXMuZ2V0VGhlbWVDbHVzdGVyKG9sZFZhbC5yZXBsYWNlKCcjJywgJycpKQ0KICAgICAgDQogICAgICBjb25zdCBnZXRIYW5kbGVyID0gKHZhcmlhYmxlLCBpZCkgPT4gew0KICAgICAgICByZXR1cm4gKCkgPT4gew0KICAgICAgICAgIGNvbnN0IG9yaWdpbmFsQ2x1c3RlciA9IHRoaXMuZ2V0VGhlbWVDbHVzdGVyKE9SSUdJTkFMX1RIRU1FLnJlcGxhY2UoJyMnLCAnJykpDQogICAgICAgICAgY29uc3QgbmV3U3R5bGUgPSB0aGlzLnVwZGF0ZVN0eWxlKHRoaXNbdmFyaWFibGVdLCBvcmlnaW5hbENsdXN0ZXIsIHRoZW1lQ2x1c3RlcikNCg0KICAgICAgICAgIGxldCBzdHlsZVRhZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKQ0KICAgICAgICAgIGlmICghc3R5bGVUYWcpIHsNCiAgICAgICAgICAgIHN0eWxlVGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKQ0KICAgICAgICAgICAgc3R5bGVUYWcuc2V0QXR0cmlidXRlKCdpZCcsIGlkKQ0KICAgICAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZVRhZykNCiAgICAgICAgICB9DQogICAgICAgICAgc3R5bGVUYWcuaW5uZXJUZXh0ID0gbmV3U3R5bGUNCiAgICAgICAgfQ0KICAgICAgfQ0KICAgICAgY29uc3QgY2hhbGtIYW5kbGVyID0gZ2V0SGFuZGxlcignY2hhbGsnLCAnY2hhbGstc3R5bGUnKQ0KICAgICAgaWYgKCF0aGlzLmNoYWxrKSB7DQogICAgICAgIGNvbnN0IHVybCA9IGBodHRwczovL3VucGtnLmNvbS9lbGVtZW50LXVpQCR7dmVyc2lvbn0vbGliL3RoZW1lLWNoYWxrL2luZGV4LmNzc2ANCiAgICAgICAgdGhpcy5nZXRDU1NTdHJpbmcodXJsLCBjaGFsa0hhbmRsZXIsICdjaGFsaycpDQogICAgICB9IGVsc2Ugew0KICAgICAgICBjaGFsa0hhbmRsZXIoKQ0KICAgICAgfQ0KICAgICAgY29uc3Qgc3R5bGVzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdzdHlsZScpKQ0KICAgICAgICAuZmlsdGVyKHN0eWxlID0+IHsNCiAgICAgICAgICBjb25zdCB0ZXh0ID0gc3R5bGUuaW5uZXJUZXh0DQogICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAob2xkVmFsLCAnaScpLnRlc3QodGV4dCkgJiYgIS9DaGFsayBWYXJpYWJsZXMvLnRlc3QodGV4dCkNCiAgICAgICAgfSkNCiAgICAgIHN0eWxlcy5mb3JFYWNoKHN0eWxlID0+IHsNCiAgICAgICAgY29uc3QgeyBpbm5lclRleHQgfSA9IHN0eWxlDQogICAgICAgIGlmICh0eXBlb2YgaW5uZXJUZXh0ICE9PSAnc3RyaW5nJykgcmV0dXJuDQogICAgICAgIHN0eWxlLmlubmVyVGV4dCA9IHRoaXMudXBkYXRlU3R5bGUoaW5uZXJUZXh0LCBvcmlnaW5hbENsdXN0ZXIsIHRoZW1lQ2x1c3RlcikNCiAgICAgIH0pDQogICAgICAvLyDlk43lupTlpJbpg6jmk43kvZwNCiAgICAgIHRoaXMuJGVtaXQoJ29uVGhlbWVDaGFuZ2UnLCB2YWwpDQogICAgICBpZih0aGlzLnNob3dTdWNjZXNzKSB7DQogICAgICAgIHRoaXMuJG1lc3NhZ2UoeyBtZXNzYWdlOiAn5o2i6IKk5oiQ5YqfJywgdHlwZTogJ3N1Y2Nlc3MnIH0pDQogICAgICB9IGVsc2Ugew0KICAgICAgICB0aGlzLnNob3dTdWNjZXNzID0gdHJ1ZQ0KICAgICAgfQ0KICAgIH0NCiAgfSwNCiAgbWV0aG9kczogew0KICAgIHVwZGF0ZVN0eWxlKHN0eWxlLCBvbGRDbHVzdGVyLCBuZXdDbHVzdGVyKSB7DQogICAgICBsZXQgbmV3U3R5bGUgPSBzdHlsZQ0KICAgICAgb2xkQ2x1c3Rlci5mb3JFYWNoKChjb2xvciwgaW5kZXgpID0+IHsNCiAgICAgICAgbmV3U3R5bGUgPSBuZXdTdHlsZS5yZXBsYWNlKG5ldyBSZWdFeHAoY29sb3IsICdpZycpLCBuZXdDbHVzdGVyW2luZGV4XSkNCiAgICAgIH0pDQogICAgICByZXR1cm4gbmV3U3R5bGUNCiAgICB9LA0KDQogICAgZ2V0Q1NTU3RyaW5nKHVybCwgY2FsbGJhY2ssIHZhcmlhYmxlKSB7DQogICAgICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKQ0KICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHsNCiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0ICYmIHhoci5zdGF0dXMgPT09IDIwMCkgew0KICAgICAgICAgIHRoaXNbdmFyaWFibGVdID0geGhyLnJlc3BvbnNlVGV4dC5yZXBsYWNlKC9AZm9udC1mYWNle1tefV0rfS8sICcnKQ0KICAgICAgICAgIGNhbGxiYWNrKCkNCiAgICAgICAgfQ0KICAgICAgfQ0KICAgICAgeGhyLm9wZW4oJ0dFVCcsIHVybCkNCiAgICAgIHhoci5zZW5kKCkNCiAgICB9LA0KDQogICAgZ2V0VGhlbWVDbHVzdGVyKHRoZW1lKSB7DQogICAgICBjb25zdCB0aW50Q29sb3IgPSAoY29sb3IsIHRpbnQpID0+IHsNCiAgICAgICAgbGV0IHJlZCA9IHBhcnNlSW50KGNvbG9yLnNsaWNlKDAsIDIpLCAxNikNCiAgICAgICAgbGV0IGdyZWVuID0gcGFyc2VJbnQoY29sb3Iuc2xpY2UoMiwgNCksIDE2KQ0KICAgICAgICBsZXQgYmx1ZSA9IHBhcnNlSW50KGNvbG9yLnNsaWNlKDQsIDYpLCAxNikNCg0KICAgICAgICBpZiAodGludCA9PT0gMCkgeyAvLyB3aGVuIHByaW1hcnkgY29sb3IgaXMgaW4gaXRzIHJnYiBzcGFjZQ0KICAgICAgICAgIHJldHVybiBbcmVkLCBncmVlbiwgYmx1ZV0uam9pbignLCcpDQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgcmVkICs9IE1hdGgucm91bmQodGludCAqICgyNTUgLSByZWQpKQ0KICAgICAgICAgIGdyZWVuICs9IE1hdGgucm91bmQodGludCAqICgyNTUgLSBncmVlbikpDQogICAgICAgICAgYmx1ZSArPSBNYXRoLnJvdW5kKHRpbnQgKiAoMjU1IC0gYmx1ZSkpDQoNCiAgICAgICAgICByZWQgPSByZWQudG9TdHJpbmcoMTYpDQogICAgICAgICAgZ3JlZW4gPSBncmVlbi50b1N0cmluZygxNikNCiAgICAgICAgICBibHVlID0gYmx1ZS50b1N0cmluZygxNikNCg0KICAgICAgICAgIHJldHVybiBgIyR7cmVkfSR7Z3JlZW59JHtibHVlfWANCiAgICAgICAgfQ0KICAgICAgfQ0KDQogICAgICBjb25zdCBzaGFkZUNvbG9yID0gKGNvbG9yLCBzaGFkZSkgPT4gew0KICAgICAgICBsZXQgcmVkID0gcGFyc2VJbnQoY29sb3Iuc2xpY2UoMCwgMiksIDE2KQ0KICAgICAgICBsZXQgZ3JlZW4gPSBwYXJzZUludChjb2xvci5zbGljZSgyLCA0KSwgMTYpDQogICAgICAgIGxldCBibHVlID0gcGFyc2VJbnQoY29sb3Iuc2xpY2UoNCwgNiksIDE2KQ0KDQogICAgICAgIHJlZCA9IE1hdGgucm91bmQoKDEgLSBzaGFkZSkgKiByZWQpDQogICAgICAgIGdyZWVuID0gTWF0aC5yb3VuZCgoMSAtIHNoYWRlKSAqIGdyZWVuKQ0KICAgICAgICBibHVlID0gTWF0aC5yb3VuZCgoMSAtIHNoYWRlKSAqIGJsdWUpDQoNCiAgICAgICAgcmVkID0gcmVkLnRvU3RyaW5nKDE2KQ0KICAgICAgICBncmVlbiA9IGdyZWVuLnRvU3RyaW5nKDE2KQ0KICAgICAgICBibHVlID0gYmx1ZS50b1N0cmluZygxNikNCg0KICAgICAgICByZXR1cm4gYCMke3JlZH0ke2dyZWVufSR7Ymx1ZX1gDQogICAgICB9DQoNCiAgICAgIGNvbnN0IGNsdXN0ZXJzID0gW3RoZW1lXQ0KICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gOTsgaSsrKSB7DQogICAgICAgIGNsdXN0ZXJzLnB1c2godGludENvbG9yKHRoZW1lLCBOdW1iZXIoKGkgLyAxMCkudG9GaXhlZCgyKSkpKQ0KICAgICAgfQ0KICAgICAgY2x1c3RlcnMucHVzaChzaGFkZUNvbG9yKHRoZW1lLCAwLjEpKQ0KICAgICAgcmV0dXJuIGNsdXN0ZXJzDQogICAgfQ0KICB9DQp9DQo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/ThemePicker","sourcesContent":["<template>\r\n  <el-color-picker class=\"theme-picker\" popper-class=\"theme-picker-dropdown\"\r\n    v-model=\"theme\" :size=\"size\">\r\n  </el-color-picker>\r\n</template>\r\n\r\n<script>\r\n\r\nconst version = require('element-ui/package.json').version // element-ui\r\nconst ORIGINAL_THEME = '#409EFF' // default color\r\n\r\nexport default {\r\n  name: 'ThemePicker',\r\n  props: {\r\n    default: { // 初始化主题，可由外部传入\r\n      type: String,\r\n      default: null\r\n    },\r\n    size: { // 初始化主题，可由外部传入\r\n      type: String,\r\n      default: 'small'\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      chalk: '', // content of theme-chalk css\r\n      theme: ORIGINAL_THEME,\r\n      showSuccess: true // 是否弹出换肤成功消息\r\n    }\r\n  },\r\n  mounted() {\r\n    if(this.default != null) {\r\n      this.theme = this.default\r\n      this.$emit('onThemeChange', this.theme)\r\n      this.showSuccess = false\r\n    }\r\n  },\r\n  watch: {\r\n    theme(val, oldVal) {\r\n      if (typeof val !== 'string') return\r\n      // 替换CSS样式，修改主题色\r\n      const themeCluster = this.getThemeCluster(val.replace('#', ''))\r\n      const originalCluster = this.getThemeCluster(oldVal.replace('#', ''))\r\n      \r\n      const getHandler = (variable, id) => {\r\n        return () => {\r\n          const originalCluster = this.getThemeCluster(ORIGINAL_THEME.replace('#', ''))\r\n          const newStyle = this.updateStyle(this[variable], originalCluster, themeCluster)\r\n\r\n          let styleTag = document.getElementById(id)\r\n          if (!styleTag) {\r\n            styleTag = document.createElement('style')\r\n            styleTag.setAttribute('id', id)\r\n            document.head.appendChild(styleTag)\r\n          }\r\n          styleTag.innerText = newStyle\r\n        }\r\n      }\r\n      const chalkHandler = getHandler('chalk', 'chalk-style')\r\n      if (!this.chalk) {\r\n        const url = `https://unpkg.com/element-ui@${version}/lib/theme-chalk/index.css`\r\n        this.getCSSString(url, chalkHandler, 'chalk')\r\n      } else {\r\n        chalkHandler()\r\n      }\r\n      const styles = [].slice.call(document.querySelectorAll('style'))\r\n        .filter(style => {\r\n          const text = style.innerText\r\n          return new RegExp(oldVal, 'i').test(text) && !/Chalk Variables/.test(text)\r\n        })\r\n      styles.forEach(style => {\r\n        const { innerText } = style\r\n        if (typeof innerText !== 'string') return\r\n        style.innerText = this.updateStyle(innerText, originalCluster, themeCluster)\r\n      })\r\n      // 响应外部操作\r\n      this.$emit('onThemeChange', val)\r\n      if(this.showSuccess) {\r\n        this.$message({ message: '换肤成功', type: 'success' })\r\n      } else {\r\n        this.showSuccess = true\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    updateStyle(style, oldCluster, newCluster) {\r\n      let newStyle = style\r\n      oldCluster.forEach((color, index) => {\r\n        newStyle = newStyle.replace(new RegExp(color, 'ig'), newCluster[index])\r\n      })\r\n      return newStyle\r\n    },\r\n\r\n    getCSSString(url, callback, variable) {\r\n      const xhr = new XMLHttpRequest()\r\n      xhr.onreadystatechange = () => {\r\n        if (xhr.readyState === 4 && xhr.status === 200) {\r\n          this[variable] = xhr.responseText.replace(/@font-face{[^}]+}/, '')\r\n          callback()\r\n        }\r\n      }\r\n      xhr.open('GET', url)\r\n      xhr.send()\r\n    },\r\n\r\n    getThemeCluster(theme) {\r\n      const tintColor = (color, tint) => {\r\n        let red = parseInt(color.slice(0, 2), 16)\r\n        let green = parseInt(color.slice(2, 4), 16)\r\n        let blue = parseInt(color.slice(4, 6), 16)\r\n\r\n        if (tint === 0) { // when primary color is in its rgb space\r\n          return [red, green, blue].join(',')\r\n        } else {\r\n          red += Math.round(tint * (255 - red))\r\n          green += Math.round(tint * (255 - green))\r\n          blue += Math.round(tint * (255 - blue))\r\n\r\n          red = red.toString(16)\r\n          green = green.toString(16)\r\n          blue = blue.toString(16)\r\n\r\n          return `#${red}${green}${blue}`\r\n        }\r\n      }\r\n\r\n      const shadeColor = (color, shade) => {\r\n        let red = parseInt(color.slice(0, 2), 16)\r\n        let green = parseInt(color.slice(2, 4), 16)\r\n        let blue = parseInt(color.slice(4, 6), 16)\r\n\r\n        red = Math.round((1 - shade) * red)\r\n        green = Math.round((1 - shade) * green)\r\n        blue = Math.round((1 - shade) * blue)\r\n\r\n        red = red.toString(16)\r\n        green = green.toString(16)\r\n        blue = blue.toString(16)\r\n\r\n        return `#${red}${green}${blue}`\r\n      }\r\n\r\n      const clusters = [theme]\r\n      for (let i = 0; i <= 9; i++) {\r\n        clusters.push(tintColor(theme, Number((i / 10).toFixed(2))))\r\n      }\r\n      clusters.push(shadeColor(theme, 0.1))\r\n      return clusters\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.theme-picker .el-color-picker__trigger {\r\n  vertical-align: middle;\r\n}\r\n\r\n.theme-picker-dropdown .el-color-dropdown__link-btn {\r\n  display: none;\r\n}\r\n</style>"]}]}